"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = require(".");

var _README = _interopRequireDefault(require("../README.md"));

/* eslint-disable */
var TestComponent = function TestComponent(_ref) {
  var func = _ref.func,
      obj = _ref.obj,
      array = _ref.array,
      number = _ref.number,
      string = _ref.string,
      bool = _ref.bool,
      empty = _ref.empty;
  return _react.default.createElement("div", null, _react.default.createElement("h1", null, String(func)), _react.default.createElement("h2", null, String(obj)), _react.default.createElement("h3", null, String(array)), _react.default.createElement("h4", null, String(number)), _react.default.createElement("h5", null, String(string)), _react.default.createElement("h6", null, String(bool)), _react.default.createElement("p", null, String(empty)), _react.default.createElement("a", {
    href: "#"
  }, "test"), _react.default.createElement("code", null, "storiesOf"), _react.default.createElement("ul", null, _react.default.createElement("li", null, "1"), _react.default.createElement("li", null, "2")));
};
/* eslint-enable */


var testOptions = {
  propTables: false
};
var testMarkdown = "# Test story\n## with markdown info\ncontaining **bold**, *cursive* text, `code` and [a link](https://github.com)";
describe('addon Info', function () {
  // eslint-disable-next-line react/prop-types
  var storyFn = function storyFn(_ref2) {
    var story = _ref2.story;
    return _react.default.createElement("div", null, "It's a ", story, " story:", _react.default.createElement(TestComponent, {
      func: function func(x) {
        return x + 1;
      },
      obj: {
        a: 'a',
        b: 'b'
      },
      array: [1, 2, 3],
      number: 7,
      string: "seven",
      bool: true
    }));
  };

  it('should render <Info /> and markdown', function () {
    var Info = (0, _.withInfo)(testMarkdown)(storyFn);
    expect((0, _enzyme.mount)(_react.default.createElement(Info, null))).toMatchSnapshot();
  });
  it('should render <Info /> and external markdown', function () {
    var Info = (0, _.withInfo)(_README.default)(storyFn);
    expect((0, _enzyme.mount)(_react.default.createElement(Info, null))).toMatchSnapshot();
  });
  it('should render with text options', function () {
    var Info = (0, _.withInfo)({
      text: 'some text here'
    })(storyFn);
    (0, _enzyme.mount)(_react.default.createElement(Info, null));
  });
  it('should render with missed info', function () {
    (0, _.setDefaults)(testOptions);
    var Info = (0, _.withInfo)()(storyFn);
    (0, _enzyme.mount)(_react.default.createElement(Info, null));
  });
});